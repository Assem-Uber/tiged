#!/usr/bin/env node
import{fileURLToPath as R}from"url";import N from"path";var C=()=>R(import.meta.url),S=()=>N.dirname(C()),h=S();import b from"enquirer";import M from"fuzzysearch";import k from"mri";import*as l from"node:fs/promises";import*as f from"node:path";import A from"picocolors";import{tiged as H}from"tiged";import{glob as _}from"tinyglobby";import{HttpsProxyAgent as Z}from"https-proxy-agent";import*as c from"node:fs/promises";import{createRequire as j}from"node:module";import{homedir as L,tmpdir as U}from"node:os";import*as y from"node:path";var I=()=>L()||U(),q=I();function O(r,s){let e=j(import.meta.url);try{return s&&s.clearCache===!0&&delete e.cache[e.resolve(r)],e(r)}catch{return null}}var E=async r=>{try{return await c.access(r),!0}catch{return!1}};var m=y.join(q,".degit");var{bold:B,cyan:x,magenta:$,red:G,underline:J}=A,w=k(process.argv.slice(2),{alias:{f:"force",c:"cache",o:"offline-mode",D:"disable-cache",v:"verbose",m:"mode",s:"subgroup",d:"sub-directory"},boolean:["force","cache","offline-mode","disable-cache","verbose","subgroup"]}),[T,W="."]=w._;async function z(){if(w.help){let r=(await l.readFile(f.join(h,"..","help.md"),"utf-8")).replace(/^(\s*)#+ (.+)/gm,(s,e,n)=>e+B(n)).replace(/_([^_]+)_/g,(s,e)=>J(e)).replace(/`([^`]+)`/g,(s,e)=>x(e));process.stdout.write(`
${r}
`)}else if(T)await D(T,W,w);else{let r=new Map,s=await _("**/access.json",{cwd:m});await Promise.all(s.map(async t=>{let[i,a,p]=t.split(f.sep),g=await l.readFile(`${m}/${t}`,"utf-8"),u=JSON.parse(g);Object.entries(u).forEach(([d,v])=>{let P=`${i}:${a}/${p}#${d}`;r.set(P,new Date(v).getTime())})}));let e=t=>{let[i,a,p]=t.split(f.sep),g=O(`${m}/${t}`);return Object.entries(g).map(([u,d])=>({name:d,message:`${i}:${a}/${p}#${u}`,value:`${i}:${a}/${p}#${u}`}))},n=(await Promise.all((await _("**/map.json",{cwd:m})).map(e))).reduce((t,i)=>t.concat(i),[]).sort((t,i)=>{let a=r.get(t.value)??0;return(r.get(i.value)??0)-a}),o=await b.prompt([{type:"autocomplete",name:"src",message:"Repo to clone?",suggest:(t,i)=>i.filter(({value:a})=>M(t,a)),choices:n},{type:"input",name:"dest",message:"Destination directory?",initial:"."},{type:"toggle",name:"cache",message:"Use cached version?"}]);if(!(!await E(o.dest)||(await l.readdir(o.dest)).length===0)){let{force:t}=await b.prompt([{type:"toggle",name:"force",message:"Overwrite existing files?"}]);if(!t){console.error($("! Directory not empty \u2014 aborting"));return}}await D(o.src,o.dest,{force:!0,cache:o.cache})}}async function D(r,s,e){let n=H(r,e);n.on("info",o=>{console.error(x(`> ${o.message?.replace("options.","--")}`))}),n.on("warn",o=>{console.error($(`! ${o.message?.replace("options.","--")}`))});try{await n.clone(s)}catch(o){o instanceof Error&&(console.error(G(`! ${o.message.replace("options.","--")}`)),process.exit(1))}}z();
//# sourceMappingURL=bin.js.map